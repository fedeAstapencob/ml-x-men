// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/interactor.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "ml-x-men/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockLogger) Log(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), arg0...)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// PersonCreate mocks base method.
func (m *MockStorage) PersonCreate(dna string, isMutant bool) (*domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonCreate", dna, isMutant)
	ret0, _ := ret[0].(*domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonCreate indicates an expected call of PersonCreate.
func (mr *MockStorageMockRecorder) PersonCreate(dna, isMutant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonCreate", reflect.TypeOf((*MockStorage)(nil).PersonCreate), dna, isMutant)
}

// PersonGetByDna mocks base method.
func (m *MockStorage) PersonGetByDna(dna string) (*domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonGetByDna", dna)
	ret0, _ := ret[0].(*domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonGetByDna indicates an expected call of PersonGetByDna.
func (mr *MockStorageMockRecorder) PersonGetByDna(dna interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonGetByDna", reflect.TypeOf((*MockStorage)(nil).PersonGetByDna), dna)
}

// StatsGetMutantVsHuman mocks base method.
func (m *MockStorage) StatsGetMutantVsHuman() (int64, int64, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatsGetMutantVsHuman")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(float32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// StatsGetMutantVsHuman indicates an expected call of StatsGetMutantVsHuman.
func (mr *MockStorageMockRecorder) StatsGetMutantVsHuman() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatsGetMutantVsHuman", reflect.TypeOf((*MockStorage)(nil).StatsGetMutantVsHuman))
}
