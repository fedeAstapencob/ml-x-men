// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/handler.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "ml-x-men/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetByDna mocks base method.
func (m *MockHandler) GetByDna(dna string) (*domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDna", dna)
	ret0, _ := ret[0].(*domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDna indicates an expected call of GetByDna.
func (mr *MockHandlerMockRecorder) GetByDna(dna interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDna", reflect.TypeOf((*MockHandler)(nil).GetByDna), dna)
}

// IsMutant mocks base method.
func (m *MockHandler) IsMutant(matrix [][]byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMutant", matrix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMutant indicates an expected call of IsMutant.
func (mr *MockHandlerMockRecorder) IsMutant(matrix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMutant", reflect.TypeOf((*MockHandler)(nil).IsMutant), matrix)
}

// PersonCreate mocks base method.
func (m *MockHandler) PersonCreate(dna string, isMutant bool) (*domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonCreate", dna, isMutant)
	ret0, _ := ret[0].(*domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonCreate indicates an expected call of PersonCreate.
func (mr *MockHandlerMockRecorder) PersonCreate(dna, isMutant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonCreate", reflect.TypeOf((*MockHandler)(nil).PersonCreate), dna, isMutant)
}

// StatsGetMutantVsHuman mocks base method.
func (m *MockHandler) StatsGetMutantVsHuman() (int64, int64, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatsGetMutantVsHuman")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(float32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// StatsGetMutantVsHuman indicates an expected call of StatsGetMutantVsHuman.
func (mr *MockHandlerMockRecorder) StatsGetMutantVsHuman() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatsGetMutantVsHuman", reflect.TypeOf((*MockHandler)(nil).StatsGetMutantVsHuman))
}

// MockPersonLogic is a mock of PersonLogic interface.
type MockPersonLogic struct {
	ctrl     *gomock.Controller
	recorder *MockPersonLogicMockRecorder
}

// MockPersonLogicMockRecorder is the mock recorder for MockPersonLogic.
type MockPersonLogicMockRecorder struct {
	mock *MockPersonLogic
}

// NewMockPersonLogic creates a new mock instance.
func NewMockPersonLogic(ctrl *gomock.Controller) *MockPersonLogic {
	mock := &MockPersonLogic{ctrl: ctrl}
	mock.recorder = &MockPersonLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonLogic) EXPECT() *MockPersonLogicMockRecorder {
	return m.recorder
}

// GetByDna mocks base method.
func (m *MockPersonLogic) GetByDna(dna string) (*domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDna", dna)
	ret0, _ := ret[0].(*domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDna indicates an expected call of GetByDna.
func (mr *MockPersonLogicMockRecorder) GetByDna(dna interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDna", reflect.TypeOf((*MockPersonLogic)(nil).GetByDna), dna)
}

// IsMutant mocks base method.
func (m *MockPersonLogic) IsMutant(matrix [][]byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMutant", matrix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMutant indicates an expected call of IsMutant.
func (mr *MockPersonLogicMockRecorder) IsMutant(matrix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMutant", reflect.TypeOf((*MockPersonLogic)(nil).IsMutant), matrix)
}

// PersonCreate mocks base method.
func (m *MockPersonLogic) PersonCreate(dna string, isMutant bool) (*domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonCreate", dna, isMutant)
	ret0, _ := ret[0].(*domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonCreate indicates an expected call of PersonCreate.
func (mr *MockPersonLogicMockRecorder) PersonCreate(dna, isMutant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonCreate", reflect.TypeOf((*MockPersonLogic)(nil).PersonCreate), dna, isMutant)
}

// MockStatLogic is a mock of StatLogic interface.
type MockStatLogic struct {
	ctrl     *gomock.Controller
	recorder *MockStatLogicMockRecorder
}

// MockStatLogicMockRecorder is the mock recorder for MockStatLogic.
type MockStatLogicMockRecorder struct {
	mock *MockStatLogic
}

// NewMockStatLogic creates a new mock instance.
func NewMockStatLogic(ctrl *gomock.Controller) *MockStatLogic {
	mock := &MockStatLogic{ctrl: ctrl}
	mock.recorder = &MockStatLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatLogic) EXPECT() *MockStatLogicMockRecorder {
	return m.recorder
}

// StatsGetMutantVsHuman mocks base method.
func (m *MockStatLogic) StatsGetMutantVsHuman() (int64, int64, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatsGetMutantVsHuman")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(float32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// StatsGetMutantVsHuman indicates an expected call of StatsGetMutantVsHuman.
func (mr *MockStatLogicMockRecorder) StatsGetMutantVsHuman() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatsGetMutantVsHuman", reflect.TypeOf((*MockStatLogic)(nil).StatsGetMutantVsHuman))
}
